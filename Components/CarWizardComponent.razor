@page "/car"
@inject ICarWizardViewModel CarWizardViewModel
@inject HttpClient Http
@using LifeManager_BlazorServerUI.Models

<div class="car-wizard__grid-container">
    <div class="car-wizard__progress-area">
        @foreach (var WizardStep in CarWizardViewModel.WizardSteps)
        {
            if (WizardStep.StepNumber == CarWizardViewModel.ActiveStep.StepNumber)
            {
                <div class="card-wizard__progress-area__progress-item_active">
                    @WizardStep.StepName
                </div>
            }
            else if (WizardStep.Completed)
            {
                <div class="card-wizard__progress-area__progress-item_completed">
                    @WizardStep.StepName
                </div>
            }
            else
            {
                <div class="card-wizard__progress-area__progress-item">
                    @WizardStep.StepName
                </div>
            }
        }
    </div>

    <div class="car-wizard__form-area">
        <form class="car-wizard_form-area__form">
            @switch (CarWizardViewModel.ActiveStep.StepNumber)
            {
                case 1:
                    <div class="car-wizard__car_selection_area">
                        @* TODO: Make this overflow hidden
                            with a draggable scroll feature.
                            Will prob need JSInterop for it.
                        *@
                        <div class="car-wizard__car_selection_area__list">
                            @*@foreach (var Car in CarWizardViewModel.Cars)
                                this is what I WANT to have but I can't get the
                                service layer to init the Cars property from the View
                                initialization sequence so instead I am trying to just do it directly
                                from the view which is what I have foreach referencing the local
                                Cars prop below and not the ViewModel's Cars prop*@
                            @foreach (var Car in Cars)
                            {
                                <div class="car-wizard__car_selection_area__list__item"
                                     @onclick="(e => CarWizardViewModel.HandleVehicleSelect(Car))">
                                    @Car.Make.ToUpper()
                                </div>
                            }
                        </div>
                        <div class="car-wizard__car_selection_area__add-car-button"
                             @onclick="(e => CarWizardViewModel.OpenModal())">
                            <div class="car-wizard__car_selection_area__add-car-button-title">
                                ADD CAR
                            </div>
                        </div>
                    </div>
                    if (CarWizardViewModel.AddCarModalIsVisible)
                    {
                        <div class="add-car-button__modal">
                            <div class="add-car-button__modal-content">
                                <span class="modal-close"
                                      @onclick="(e =>
                                                CarWizardViewModel
                                                .CloseModal())">&times;</span>
                                The Add Car Button Modal Window
                            </div>
                        </div>
                    }
                    break;
                case 2:
                    <div>
                        Form 2
                    </div>
                    break;
                case 3:
                    <div>
                        Form 3
                    </div>
                    break;
                case 4:
                    <div>
                        Form 4
                    </div>
                    break;
                default:
                    <div>
                        Error
                    </div>
                    break;
            }
        </form>
    </div>
    <div class="car-wizard__form-area__button-group">
        @if (CarWizardViewModel.ActiveStep.StepNumber == 1)
        {
            <div class="wizard-next-button" @onclick="CarWizardViewModel.GoToNextStep">
                Next
            </div>
        }
        else if (CarWizardViewModel.ActiveStep.StepNumber >= 1
            && CarWizardViewModel.ActiveStep.StepNumber < CarWizardViewModel.WizardSteps.Count)
        {
            <div class="wizard-prev-button" @onclick="CarWizardViewModel.GoToPreviousStep">
                Previous
            </div>
            <div class="wizard-next-button" @onclick="CarWizardViewModel.GoToNextStep">
                Next
            </div>
        }
        else
        {
            <div class="wizard-prev-button" @onclick="CarWizardViewModel.GoToPreviousStep">
                Previous
            </div>
            <div class="wizard-submit-button" @onclick="CarWizardViewModel.HandleSubmit">
                Submit
            </div>
        }
    </div>
</div>

@code {

    List<Car> Cars = new List<Car>();

    async Task LoadCars()
    {
        Cars = await CarWizardViewModel.GetCars();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }
}